import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Collections;
import java.util.List;

class SiteServiceTest {

    private Location locationMock;
    private DeltaInputRequest deltaReqMock;
    private NetworkElement networkElementMock;
    private Shelf shelfMock;
    private Address addressMock;

    @BeforeEach
    void setUp() {
        // Initialize mocks
        locationMock = mock(Location.class);
        deltaReqMock = mock(DeltaInputRequest.class);
        networkElementMock = mock(NetworkElement.class);
        shelfMock = mock(Shelf.class);
        addressMock = mock(Address.class);

        // Mock methods
        when(locationMock.getExtId()).thenReturn("1234");
        when(locationMock.getName()).thenReturn("Test Location");
        when(locationMock.getClliCode()).thenReturn("CLLI123");
        when(locationMock.getLatitude()).thenReturn(40.7128);
        when(locationMock.getLongitude()).thenReturn(-74.0060);
        when(locationMock.getAddress()).thenReturn(addressMock);
        when(addressMock.getCity()).thenReturn("New York");
        when(addressMock.getCountry()).thenReturn("USA");

        // Simulate network elements
        when(locationMock.getNetworkElement()).thenReturn(List.of(networkElementMock));
        when(networkElementMock.getShelf()).thenReturn(List.of(shelfMock));
        when(shelfMock.getName()).thenReturn("ShelfName");
        when(shelfMock.getPhysicalTargetId()).thenReturn("TargetID");
    }

    @Test
    void testPopSite_withValidLocation() {
        Site site = new SiteService().popSite(locationMock, deltaReqMock);

        assertNotNull(site);
        assertEquals("Test Location", site.getLocationName());
        assertEquals("CLLI123", site.getLocationClli());
        assertEquals(40.7128, site.getLatitude());
        assertEquals(-74.0060, site.getLongitude());
        assertEquals("New York", site.getAddress().getCity());
    }

    @Test
    void testPopSite_withNullLocation() {
        Site site = new SiteService().popSite(null, deltaReqMock);
        assertNotNull(site);
    }

    @Test
    void testPopSite_withEmptyNetworkElements() {
        when(locationMock.getNetworkElement()).thenReturn(Collections.emptyList());
        Site site = new SiteService().popSite(locationMock, deltaReqMock);

        assertNotNull(site);
        assertEquals("CLLI123", site.getLocationClli());
    }
}
